{"version":3,"file":"static/js/300.4deba3b9.chunk.js","mappings":"+SAsQA,UA7Oe,SAACA,GACd,IAAMC,EAAUC,EAAAA,OAAa,MACvBC,GAAWC,EAAAA,EAAAA,MACjBC,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAA0BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA0Cb,EAAAA,EAAAA,UAAS,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAA/CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAA0CjB,EAAAA,EAAAA,UAAS,IAAGkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAA/CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GACtCG,GAAoCrB,EAAAA,EAAAA,UAAS,IAAGsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA4BzB,EAAAA,EAAAA,UAAS,IAAG0B,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAoC7B,EAAAA,EAAAA,UAAS,IAAG8B,GAAA5B,EAAAA,EAAAA,GAAA2B,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,IAAOC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,IAAI,IAExCG,IAAWC,EAAAA,EAAAA,MAEXC,GAAc,WAIlB,IAHA,IAAMC,EACJ,iEACEC,EAAM,GACDC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAAOD,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,EAAWO,SAEjE,OAAON,CACT,EAEMO,GAAoB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACvBP,EAAYf,KACZgB,GAAe,EAEbC,GAAWM,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,MAAe,SAAS,KAAD,MACrCR,EAAa,CAADI,EAAAE,KAAA,SAKhB,OAJKJ,GAAWO,EAAAA,EAAAA,IACfR,GACAS,EAAAA,EAAAA,IAAa,WACbC,EAAAA,EAAAA,IAAQZ,IACTK,EAAAE,KAAA,GACsBM,EAAAA,EAAAA,IAAIV,GAAU,KAAD,EACb,OADTE,EAAAS,KACDC,MACXd,GAAe,EAEfD,EAAYf,KACboB,EAAAE,KAAA,gBAEHhC,EAAUyB,GAAW,yBAAAK,EAAAW,OAAA,GAAAjB,EAAA,KACtB,kBAnByB,OAAAJ,EAAAsB,MAAA,KAAAC,UAAA,MAqB1BC,EAAAA,EAAAA,YAAU,WACRzB,IAEF,GAAG,IAEH,IAAM0B,GAAY,eAAAC,GAAAzB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAwB,EAAOC,GAAC,IAAAC,EAAAC,EAAA,OAAA5B,EAAAA,EAAAA,KAAAO,MAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,OACR,OAAnBgB,EAAEI,iBAAiBD,EAAApB,KAAA,EAAAoB,EAAAnB,KAAA,EAEMxB,IAAS6C,EAAAA,EAAAA,IAAO1E,EAAOI,IAAW,KAAD,EAA5C,OAA4CkE,EAAAE,EAAAZ,KAAhDW,EAAID,EAAJC,KAAIC,EAAAnB,KAAA,GACNsB,EAAAA,EAAAA,IAAkBJ,EAAKtC,IAAK,CAChCrC,SAAAA,EACAI,MAAAA,EACAY,cAAAA,EACAJ,cAAAA,EACAQ,WAAAA,EACAI,OAAAA,IACC,KAAD,EAAAoD,EAAAnB,KAAA,iBAAAmB,EAAApB,KAAA,GAAAoB,EAAAI,GAAAJ,EAAA,SAEFK,QAAQC,IAAGN,EAAAI,IAAQ,yBAAAJ,EAAAV,OAAA,GAAAM,EAAA,mBAEtB,gBAfiBW,GAAA,OAAAZ,EAAAJ,MAAA,KAAAC,UAAA,KAkElB,OAjDAC,EAAAA,EAAAA,YAAU,WACR,IAAMe,GAAQ1B,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,QAClBI,EAAAA,EAAAA,KAAIsB,EAAAA,EAAAA,IAAMD,EAAM,YACbE,MAAK,SAACC,GACDA,EAASC,SACX3D,EAAc0D,EAAStB,OAEvBgB,QAAQC,IAAI,oBAEhB,IACCO,OAAM,SAACC,GACNT,QAAQS,MAAMA,EAChB,GACJ,GAAG,KAEHrB,EAAAA,EAAAA,YAAU,WAiBR,OAhBIvC,GAAK6D,UACPnG,EAAQoG,QAAUC,EAAAA,GAAAA,KAAW,oBAAgB,CAAEC,WAAW,KAExDhE,GAAK6C,OACPkB,EAAAA,GAAAA,QAAcrG,EAAQoG,SACtBC,EAAAA,GAAAA,QAAc,yBACdxF,EAAS,IACTI,EAAY,IACZI,EAAiB,IACjBI,EAAiB,IACjBvB,EAAS,oBAEPoC,GAAK4D,QACPG,EAAAA,GAAAA,QAAcrG,EAAQoG,SACtBC,EAAAA,GAAAA,MAAY,UAADE,OAAMjE,GAAK4D,SAEjB,WAED5D,GAAK4D,OACPzD,IAAS+D,EAAAA,EAAAA,IAAS,MAEtB,CAEF,GAAG,CAAClE,MAWFmE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,MAAM,SACNC,KAAK,wGAEPH,EAAAA,EAAAA,KAAA,OAAKI,UAAU,iCAAgCL,UAC7CC,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CAAAN,UACRC,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAAAP,UACFC,EAAAA,EAAAA,KAACO,EAAAA,EAAG,CAACC,GAAI,GAAGT,UACVC,EAAAA,EAAAA,KAACS,EAAAA,EAAI,CAACL,UAAU,aAAYL,UAC1BF,EAAAA,EAAAA,MAACY,EAAAA,EAAAA,KAAS,CAAAV,SAAA,EACRC,EAAAA,EAAAA,KAAA,MAAII,UAAU,cAAaL,SAAC,YAC5BF,EAAAA,EAAAA,MAACa,EAAAA,EAAI,CAACC,SAAUzC,GAAa6B,SAAA,EAC3BC,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CACJC,UAAU,WACVX,MAAM,YACNY,KAAK,OACLC,YAAY,kBACZC,MAAOpH,EACPqH,SAAU,SAAC5C,GAAC,OAAKxE,EAAYwE,EAAE6C,OAAOF,MAAM,EAC5CG,UAAU,KAYZtB,EAAAA,EAAAA,MAACa,EAAAA,EAAAA,MAAU,CAACU,MAAO,CAAEC,aAAc,QAAStB,SAAA,EAC1CC,EAAAA,EAAAA,KAACU,EAAAA,EAAAA,MAAU,CAAAX,SAAC,6BACZF,EAAAA,EAAAA,MAACa,EAAAA,EAAAA,OAAW,CACVY,KAAK,SACLL,SAAU,SAAC5C,GACTxD,EAAiBwD,EAAE6C,OAAOF,MAC5B,EACA,aAAW,wBACXA,MAAOpG,EAAcmF,SAAA,EAErBC,EAAAA,EAAAA,KAAA,UAAQgB,MAAM,GAAGO,UAAQ,EAACC,UAAQ,EAAAzB,SAAC,kCAGlCvE,EAAWiG,KAAI,SAACC,EAAQC,GACvB,OACE9B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAoBgB,MAAOU,EAAOV,MAAMjB,SACrC2B,EAAOJ,MADGK,GAEJ,MAIf,WAIJ3B,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CACJC,UAAU,gBACVX,MAAM,iBACNY,KAAK,SACLC,YAAY,uBACZC,MAAOxG,EACPyG,SAAU,SAAC5C,GAAC,OAAK5D,EAAiB4D,EAAE6C,OAAOF,MAAM,KAGnDhB,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CACJC,UAAU,cACVX,MAAM,gBACNY,KAAK,QACLC,YAAY,cACZC,MAAOhH,EACPiH,SAAU,SAAC5C,GAAC,OAAKpE,EAASoE,EAAE6C,OAAOF,MAAM,EACzCY,QAAQ,iDACRT,UAAU,KAGZnB,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CACJC,UAAU,iBACVX,MAAM,WACNY,KAAK,WACLC,YAAY,WACZC,MAAO5G,EACP6G,SAAU,SAAC5C,GAAC,OAAKhE,EAAYgE,EAAE6C,OAAOF,MAAM,EAC5CG,UAAU,KAGZtB,EAAAA,EAAAA,MAACa,EAAAA,EAAAA,MAAU,CAACN,UAAU,OAAOS,UAAU,qBAAoBd,SAAA,EACzDC,EAAAA,EAAAA,KAACU,EAAAA,EAAAA,MAAU,CAAAX,SAAC,uBACZC,EAAAA,EAAAA,KAACU,EAAAA,EAAAA,QAAY,CACXS,UAAU,EACVH,MAAOhG,EACPiG,SAAU,SAAC5C,GAAC,OAAKpD,EAAcoD,EAAE6C,OAAOF,MAAM,EAC9Ca,GAAG,WACHd,YAAY,2EACZe,KAAM,QAIV9B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,QAAQ,UAAUlB,KAAK,SAAQf,SAAC,eAI1CF,EAAAA,EAAAA,MAAA,OAAKO,UAAU,aAAYL,SAAA,CACxB,IAAI,oBACWC,EAAAA,EAAAA,KAACiC,EAAAA,GAAO,CAACC,GAAG,cAAanC,SAAC,8BAU9D,C","sources":["Containers/Signup/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PageTitle from \"../../Components/UI/PageTitle\";\r\nimport { Container, Row, Col, Form, Card, Button } from \"react-bootstrap\";\r\nimport Input from \"../../Components/UI/Input\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { createUserProfile, signup, setError } from \"../../actions/auth.action\";\r\nimport { NavLink, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n  getDatabase,\r\n  ref,\r\n  query,\r\n  orderByChild,\r\n  equalTo,\r\n  child,\r\n  get,\r\n} from \"firebase/database\";\r\n\r\n// import { createUserProfile } from \"../firebase\";\r\n\r\n/**\r\n * @author\r\n * @function Signup\r\n **/\r\n\r\nconst Signup = (props) => {\r\n  const toastId = React.useRef(null);\r\n  const navigate = useNavigate();\r\n  const [username, setUserName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [trafficNumber, setTrafficNumber] = useState(\"\");\r\n  const [trafficSource, setTrafficSource] = useState(\"\");\r\n  const [experience, setExperience] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [allSources, setAllSources] = useState([]);\r\n\r\n  const auth = useSelector((state) => state.auth);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const generateUid = () => {\r\n    const characters =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let uid = \"\";\r\n    for (let i = 0; i < 4; i++) {\r\n      uid += characters.charAt(Math.floor(Math.random() * characters.length));\r\n    }\r\n    return uid;\r\n  };\r\n\r\n  const handleGenerateUserId = async () => {\r\n    let newUserId = generateUid();\r\n    let userIdExists = true;\r\n\r\n    const usersRef = ref(getDatabase(), \"users\");\r\n    while (userIdExists) {\r\n      const uidQuery = query(\r\n        usersRef,\r\n        orderByChild(\"userId\"),\r\n        equalTo(newUserId)\r\n      );\r\n      const snapshot = await get(uidQuery);\r\n      if (snapshot.val() === null) {\r\n        userIdExists = false;\r\n      } else {\r\n        newUserId = generateUid();\r\n      }\r\n    }\r\n    setUserId(newUserId);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleGenerateUserId();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const signupSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const { user } = await dispatch(signup(email, password));\r\n      await createUserProfile(user.uid, {\r\n        username,\r\n        email,\r\n        trafficSource,\r\n        trafficNumber,\r\n        experience,\r\n        userId,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dbRef = ref(getDatabase());\r\n    get(child(dbRef, `sources`))\r\n      .then((snapshot) => {\r\n        if (snapshot.exists()) {\r\n          setAllSources(snapshot.val());\r\n        } else {\r\n          console.log(\"No data available\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (auth.loading) {\r\n      toastId.current = toast.info(\"❕ Loading...\", { autoClose: false });\r\n    }\r\n    if (auth.user) {\r\n      toast.dismiss(toastId.current);\r\n      toast.success(`✔ Signup Succes!`);\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n      setTrafficNumber(\"\");\r\n      setTrafficSource(\"\");\r\n      navigate(\"/user/dashboard\");\r\n    }\r\n    if (auth.error) {\r\n      toast.dismiss(toastId.current);\r\n      toast.error(`❌ ${auth.error}`);\r\n    }\r\n    return () => {\r\n      // Reset the auth.error value when the component unmounts\r\n      if (auth.error) {\r\n        dispatch(setError(null));\r\n      }\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [auth]);\r\n\r\n  // if (auth.authenticate) {\r\n  //   return <Redirect to={'/blogs'} />\r\n  // }\r\n\r\n  // if(done) {\r\n  //   return <Redirect to={'/user/login'} />\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <PageTitle\r\n        title=\"Signup\"\r\n        para=\"Hey There! Looks Like You Have Finally Decided To Join Us And Become Part Of An Amazing Community.\"\r\n      />\r\n      <div className=\"signup-section section-padding\">\r\n        <Container>\r\n          <Row>\r\n            <Col lg={12}>\r\n              <Card className=\"login-card\">\r\n                <Card.Body>\r\n                  <h3 className=\"text-center\">Signup</h3>\r\n                  <Form onSubmit={signupSubmit}>\r\n                    <Input\r\n                      controlId=\"lastName\"\r\n                      title=\"User Name\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter User name\"\r\n                      value={username}\r\n                      onChange={(e) => setUserName(e.target.value)}\r\n                      required={true}\r\n                    />\r\n\r\n                    {/* <Input\r\n                      controlId=\"trafficSource\"\r\n                      title=\"Traffic Source\"\r\n                      type=\"text\"\r\n                      placeholder=\"Enter traffic Source\"\r\n                      value={trafficSource}\r\n                      onChange={(e) => setTrafficSource(e.target.value)}\r\n                    /> */}\r\n\r\n                    <Form.Group style={{ marginBottom: \"1rem\" }}>\r\n                      <Form.Label> Select Traffic Source </Form.Label>\r\n                      <Form.Select\r\n                        name=\"source\"\r\n                        onChange={(e) => {\r\n                          setTrafficSource(e.target.value);\r\n                        }}\r\n                        aria-label=\"Select Traffic Source\"\r\n                        value={trafficSource}\r\n                      >\r\n                        <option value=\"\" disabled selected>\r\n                          Open This Traffic Source Menu\r\n                        </option>\r\n                        {allSources.map((source, index) => {\r\n                          return (\r\n                            <>\r\n                              <option key={index} value={source.value}>\r\n                                {source.name}\r\n                              </option>\r\n                              ;\r\n                            </>\r\n                          );\r\n                        })}\r\n                      </Form.Select>\r\n                    </Form.Group>\r\n\r\n                    <Input\r\n                      controlId=\"trafficNumber\"\r\n                      title=\"Traffic Number\"\r\n                      type=\"number\"\r\n                      placeholder=\"Enter Traffic Number\"\r\n                      value={trafficNumber}\r\n                      onChange={(e) => setTrafficNumber(e.target.value)}\r\n                    />\r\n\r\n                    <Input\r\n                      controlId=\"signupEmail\"\r\n                      title=\"Email address\"\r\n                      type=\"email\"\r\n                      placeholder=\"Enter email\"\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                      message=\"We'll never share your email with anyone else.\"\r\n                      required={true}\r\n                    />\r\n\r\n                    <Input\r\n                      controlId=\"signupPassword\"\r\n                      title=\"Password\"\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                      required={true}\r\n                    />\r\n\r\n                    <Form.Group className=\"mb-3\" controlId=\"experienceTextArea\">\r\n                      <Form.Label> Your Experience </Form.Label>\r\n                      <Form.Control\r\n                        required={true}\r\n                        value={experience}\r\n                        onChange={(e) => setExperience(e.target.value)}\r\n                        as=\"textarea\"\r\n                        placeholder=\"Describe your Experience / How would You Bring Traffic From Your Sources\"\r\n                        rows={3}\r\n                      />\r\n                    </Form.Group>\r\n\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                      Submit\r\n                    </Button>\r\n                  </Form>\r\n                  <div className=\"confirmDiv\">\r\n                    {\" \"}\r\n                    Already a user? <NavLink to=\"/user/login\"> Login </NavLink>\r\n                  </div>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n"],"names":["props","toastId","React","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","username","setUserName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","_useState7","_useState8","trafficNumber","setTrafficNumber","_useState9","_useState10","trafficSource","setTrafficSource","_useState11","_useState12","experience","setExperience","_useState13","_useState14","userId","setUserId","_useState15","_useState16","allSources","setAllSources","auth","useSelector","state","dispatch","useDispatch","generateUid","characters","uid","i","charAt","Math","floor","random","length","handleGenerateUserId","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newUserId","userIdExists","usersRef","uidQuery","wrap","_context","prev","next","ref","getDatabase","query","orderByChild","equalTo","get","sent","val","stop","apply","arguments","useEffect","signupSubmit","_ref2","_callee2","e","_yield$dispatch","user","_context2","preventDefault","signup","createUserProfile","t0","console","log","_x","dbRef","child","then","snapshot","exists","catch","error","loading","current","toast","autoClose","concat","setError","_jsxs","_Fragment","children","_jsx","PageTitle","title","para","className","Container","Row","Col","lg","Card","Form","onSubmit","Input","controlId","type","placeholder","value","onChange","target","required","style","marginBottom","name","disabled","selected","map","source","index","message","as","rows","Button","variant","NavLink","to"],"sourceRoot":""}